generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
    id        Int       @id @default(autoincrement())
    email     String    @unique
    password  String
    role      Role      @default(GUEST)
    profile   Profile?
    recipe    Recipe[]
    avatar    String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Website   Website[]
    likes     Like[]
    comments  Comment[]
}

model Profile {
    id        Int     @id @default(autoincrement())
    userId    Int     @unique
    firstName String
    lastName  String
    bio       String?
    phone     String?
    user      User    @relation(fields: [userId], references: [id])
}

model Recipe {
    id           Int       @id @default(autoincrement())
    title        String
    imageUrl     String?
    rating       Int?
    courseType   String?
    prepTime     Int?
    cookTime     Int?
    servings     Int?
    ingredients  String
    instructions String
    description  String?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    user         User      @relation(fields: [userId], references: [id])
    userId       Int
    likes        Like[]
    comments     Comment[]
}

model Website {
    id        Int      @id @default(autoincrement())
    name      String
    url       String
    imageUrl  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
}

model Like {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    recipeId  Int
    recipe    Recipe   @relation(fields: [recipeId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Comment   Comment? @relation(fields: [commentId], references: [id])
    commentId Int?
}

model Comment {
    id        Int      @id @default(autoincrement())
    recipeId  Int
    userId    Int
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    recipe    Recipe   @relation(fields: [recipeId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    likes     Like[]
}

model Newsletter {
    id        Int      @id @default(autoincrement())
    email     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Role {
    GUEST
    ADMNIN
}
